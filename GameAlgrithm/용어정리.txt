#동적할당 
프로그램이 실행되는 중에 생성된 메모리, 힙영역에 생성됨. 프로그램 
컴퓨터의 메모리가 허용하는한 메모리를 할당하고 해제하는 것을 프로그래머가 직접 컨트롤 가능하다.

#정적할당 
프로그램이 실행되기전에 메모리의 생성이나 삭제가 언제될지 결정된 메모리. 스택영역에 할당됨.
변수의 종류에 따라 메모리의 생명주기가 달라짐.

#변수와 메모리
지역변수: 함수 내에서 만 사용가능한 변수. 함수가 종료되면 메모리가 삭제된다.
매개변수: 함수가 실행될때 전달받을 값을 저장하는 변수. (지역변수의 일종)
전역변수: 프로그램이 종료시까지 메모리가 남이있는 변수.
변수: 프로그래머가 필요에 따라 만들어 사용하는 메모리 덩어리
싱글톤에 static멤버변수를 만드는 이유: static멤버변수는 클래스 생성전에도 접근 가능해야하므로.
프로그램이 실행중이면 항상 접근할수 있는 메모리로 만들어야한다.
그러므로 전역변수의 일종인 static을 키워드를 멤버변수에 붙여주어야만 사용 가능하다.

#자료구조
연결리스트: 메모리의 차원 연결방식을 유지하면서 메모리를 확장하는 방법.

#기타
객체지향과 메모리접근방식의 차이:
객체지향은 객체 단위에 접근을 위주로 접근의 제한을 하는 것이다. 
그러므로,  메모리에 대한 접근과 객체단위 접근 애초에 같은 개념이 아니다.
실제로 포인터나 메모리 접근을 활용하여, 객체단위 private멤버에 접근 가능하다.
그러나 이런 형식의 사용이 올바른 행위라고 볼수없다.
그러므로, C#에서는 포인터가 사용은 가능하나 안전하지않은 옵션으로 분류한다.





